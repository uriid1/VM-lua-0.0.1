;
; Игра угадай число (на регистрах)
; Задача собственно угадать число -
; которое будет случайным образом задано, в начале игры
;

; Инициализация значений в память
;
; Валюта игрока     - 0x100 адрес в памяти
; Очки игрока       - 0x101 адрес в памяти
; Загаданное число  - 0x102 адрес в памяти
; Ставка игрока     - 0x103 адрес в памяти
;
LOAD AX, 10000        ; Валюта игрока
STOREM 0x100, AX      ; храним её по адресу 100
LOAD BX, 0            ; Очки игрока
STOREM 0x101, BX      ; храним по адресу 101

.status               ; Текущий статус игрока
  LOAD AX, "Money: "  ; Запись строки в регистр AX
  PRINT AX            ; Печать строки из AX
  LOADM BX, 0x100     ; Получение валюты игрока из памяти в BX
  PRINT BX            ; Печать значения из BX
  PRINTNL             ; Печать пустой строки

  LOAD AX, "Score: "  ; Запись строки в регистр AX
  PRINT AX            ; Печать строки AX
  LOADM BX, 0x101     ; Получение очков игрока из памяти в BX
  PRINT BX            ; Печать значения из BX
  PRINTNL             ; Печать пустой строки

;
; Начало игры
;
RND CX, 1, 3          ; Загадываем число от 1 до 3 в регистр CX
STOREM 0x102, CX      ; храним её по адресу 102

.enter_bet            ; Метка принятия ставки
  PRINTNL             ; Печать пустой строки

  LOAD AX, "Your bet: " ; Запись строки в AX
  PRINT AX              ; Печать строки из AX
  READN BX              ; Чтение вводимого числа в BX
  STOREM 0x103, BX      ; Записываем ставку в память

  CMP BX, 0             ; Сравнение DX == 0
  JZ .enter_bet         ; Если DX == 0, то переход на метку .enter_bet

  LOADM AX, 0x100       ; Получаем валюту игрока в AX
  CMP BX, AX            ; Проверка, что у игрока хватает валюты
  JG .incorrect_bet     ; Ввел ставку больше чем имеющаяся валюта

  CMP BX, 0             ; Сравнение BX < 0
  JL .incorrect_bet     ; Уходим на метку, если игрок ввел меньше число меньше нуля

  ; Просим угадать число
  LOAD AX, "Your number: " ; Запись строки в AX
  PRINT AX                 ; Печать строки из AX
  READN CX                 ; Чтение вводимого числа в CX
  PRINTNL                  ; Печать пустой строки

  ; Проверяем угадал ли пользователь
  ; CX это то, что ввел игрок
  LOADM BX, 0x102   ; Загаданное число компьютером
  CMP CX, BX        ; Сравниваем
  JZ .win           ; Угадал BX == CX
  JNZ .over         ; Проиграл BX != CX

; Выигрыш
.win
  LOADM AX, 0x100     ; Валюта игрока
  LOADM DX, 0x103     ; Ставка игрока
  MUL DX, 2           ; Перемножаем х2 ставку
  ADD AX, DX          ; Добавляем к валюте игрока, выигранную ставку
  STOREM 0x100, AX    ; Сохраняем умноженные деньги в память

  LOADM BX, 0x101     ; Очки игрока
  INC BX              ; Инкремент BX
  STOREM 0x101, BX    ; Сохраняем обратно очки

  PRINTNL             ; Печать пустой строки
  LOAD CX, "You win!" ; Запись строки в BX
  PRINTNL CX          ; Печать BX
  PRINTNL             ; Печать пустой строки
  JMP .status         ; Переход к метке .status

; Проигрыш
.over
  LOADM AX, 0x100     ; Валюта игрока
  LOADM CX, 0x103     ; Ставка игрока

  SUB AX, CX          ; Вычитаем ставку из валюты
  STOREM 0x100, AX    ; Сохраняем деньги в память

  LOADM BX, 0x101     ; Очки игрока
  DEC BX              ; Декремент BX
  STOREM 0x101, BX    ; Сохраняем обратно очки

  PRINTNL               ; Печать пустой строки
  LOAD EX, "You loose!" ; Запись строки в BX
  PRINTNL EX            ; Печать BX
  PRINTNL               ; Печать пустой строки

  ; Проверка что деньги не закончились
  CMP AX, 0             ; Сравниваем
  JLE .game_over        ; Если AX <= 0 идем на .game_over

  JMP .status           ; Переход к метке .status


; Некорректная ставка 
.incorrect_bet
  PRINTNL
  LOAD AX, "The bid is higher than it is in the wallet"
  PRINTNL AX
  PRINTNL
  JMP .enter_bet

; Игра окончена
.game_over
  PRINTNL
  LOAD AX, "Game Over!"
  PRINTNL AX
  EXIT 0
